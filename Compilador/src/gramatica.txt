GRAMATICA

Regras simples:

digit -> [0-9]
integer -> 0 | [1-9]+
float -> [0-9]+ '.' [0-9]+
NUM -> integer | float
char -> [a-z] | [A-Z]
boolean = 'TRUE' | 'False'
MATH_OP -> '+' | '-' | '*' | '/' | '%'
ID -> [a-z|A-Z] [a-z|A-Z|0-9|'_']*
space -> ' '
symbol ->['!'|'@'|'#'|'\'|'$'|'%'|'&'|'*'|'('|')'|'_'|'+'|'-'|'='|'['|']'|'{'|'}'|';'|'''|':'|','|'.'|'>'|'<'|'/'|'?' | '|'

Regra STRING:
STRING -> '"' STRING_CONTENT '"'
STRING_CONTENT -> (char | digit | symbol | space | special_char)

Regra OPERATION:

OP -> EXP ';'
EXP -> ID EXP'| NUM EXP' | '(' EXP ')' EXP'
EXP' -> OP_MAT EXP EXP' | e

Regra println:
PRIN -> 'println' '(' CONTENT VARS ')' ';'
CORPO -> STRING 
VARS -> [ ',' ID ]+ | e

Regra scanln:
SCAN -> 'scanln' '(' ID (',' ID)* ')' ';'

Regra Declaração:

DEC -> TYPE ':' ID '=' (ID|VALUE|FUNC_CALL) ';'
TYPE -> 'INT' | 'FLOAT' | 'VOID' | 'CHAR' | 'BOOL'
VALUE -> integer | float | boolean | char | ID

Regra Atibuição:
ATB -> ID OP_ATB ';'
OP_ATB -> MATH_OP  | SIMP_OP
MATH_OP -> ATB_TYPE OPERATION
ATB_TYPE -> += | -= | = 
SIMP_OP -> '++' | '--'

Regra if:

IF -> 'if' '(' COND ')' '{' CORPO '}' ELSE
ELSE -> 'else' ELSE_KIND | e
ELSEIF -> IF | '{' CORPO '}'
COND -> EXP_OU
EXP_OU -> EXP_E ( '||' EXP_E)* 
EXP_E -> EXP_COMP ( '&&' EXP_COMP )
EXP_COMP -> (ID|NUM|TRUE|FALSE|OPERATION) ( OP_COMP ) (ID|NUM|TRUE|FALSE|OPERATION)
OP_COMP -> '>' | '<' | '<=' | '>=' | '=''=' | '!='  
CORPO -> (IF| OP ..... ejc)* 

Regra function:

FUNC ->  TYPE ':' 'function' ID '(' PARAMETER ')' '{' CORPO RETORNO '}'
TYPE -> 'INT' | 'FLOAT' | 'VOID' | 'BOOL' | 'CHAR'
PARAMETER -> TYPE ':' ID ( ',' TYPE ':' ID)* | e
CORPO -> (IF| OP ..... etc)*
RETORNO -> 'return' (ID | TYPE) ';' | e

Regra while:

WHILE -> 'while' '(' PARAMETER ')' '{' CORPO '}'
PARAMETER -> OU_PAR
OU_PAR -> E_PAR ( '||' E_PAR )*
E_PAR -> COMP_PAR ( '&&' COMP_PAR )*
COMP_PAR -> (ID|NUM|TRUE|FALSE|OPERATION) ( OP_COMP ) (ID|NUM|TRUE|FALSE|OPERATION)
OP_COMP -> '>' | '<' | '<=' | '>=' | '=''=' | '!='
CORPO -> (IF| OP ..... etc)*

Regra for (ARRUMAR  o CHANGE):

FOR -> 'for' '(' COMPARATOR ';' COMPARATION ';' CHANGE ')' '{' CORPO '}'
COMPARATOR -> INT_DECLARATION | ID
INT_DECLARATION -> 'INT' ':' ID '=' INTEGER
COMPARATION -> ID ( OP_COMP ) (ID|NUM|TRUE|FALSE|OPERATION)
OP_COMP -> '>' | '<' | '<=' | '>=' | '=''=' | '!='
CHANGE -> ID OP_CHANGE (ID|NUM)
OP_CHANGE -> '++' | '--' | '+=' | '-=' | '='|
CORPO -> (IF| OP ..... etc)*

Regra FUNC_CALL:
CALL -> ID '(' PARMETER ')' END
PARAMETER -> TYPE ':' ID ( ',' TYPE ':' ID)* | e
END -> ';' | e

Regra Main:

MAIN -> INT ':' 'function' 'MAIN' '(' ')' '{' CORPO '}
CORPO -> (IF| OP ..... etc)*
